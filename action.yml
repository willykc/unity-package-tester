name: 'Unity package tester'
description: 'Tests Unity packages on different versions of the Unity Editor.'
inputs:
  unityVersion:
    required: true
    default: '2020.3.48f1'
    description: 'Version of unity to use for testing the package. (eg. 2020.3.44f1)'
  scopedRegistries:
    required: false
    default: ''
    description: 'Scoped registries to use during package import and testing.'
  testPackageVersion:
    required: false
    default: '1.1.33'
    description: 'Test framework package version to be used for testing.'
  coveragePackageVersion:
    required: false
    default: '1.2.4'
    description: 'Code coverage package version to be used for code coverage reporting.'
  testOnlyPackages:
    required: false
    default: ''
    description: 'List of packages needed only during testing.'
  customImage:
    required: false
    default: ''
    description: 'Specific docker image that should be used for testing the package.'
  customParameters:
    required: false
    default: ''
    description: 'Extra parameters to configure the Unity editor run.'
  testMode:
    required: false
    default: 'all'
    description: 'The type of tests to be run by the test runner.'
  coverageOptions:
    required: false
    default: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;dontClear'
    description: 'Optional coverage parameters for the -coverageOptions argument.'
  artifactsPath:
    required: false
    default: 'artifacts'
    description: 'Path where test artifacts should be stored.'
  useHostNetwork:
    required: false
    default: false
    description: 'Initializes Docker using the host network.'
  sshAgent:
    required: false
    default: ''
    description: 'SSH Agent path to forward to the container.'
  gitPrivateToken:
    required: false
    default: ''
    description: 'GitHub Private Access Token (PAT) to pull from GitHub.'
  githubToken:
    required: false
    default: ''
    description: 'Token to authorize access to the GitHub REST API. If provided, a check run will be created with the test results.'
  checkName:
    required: false
    default: 'Test Results'
    description: 'Name for the check run that is created when a github token is provided.'
  chownFilesTo:
    required: false
    default: ''
    description: 'User and optionally group (user or user:group or uid:gid) to give ownership of the resulting build artifacts'
  unityLicensingServer:
    required: false
    default: ''
    description: 'Url to a unity license server for acquiring floating licenses.'
outputs:
  artifactsPath:
    description: 'Path where the artifacts are stored.'
    value: ${{ steps.test-job.outputs.artifactsPath }}
  coveragePath:
    description: 'Path where the code coverage results are stored.'
    value: ${{ steps.test-job.outputs.coveragePath }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        repository: willykc/unity-package-tester
    - uses: actions/checkout@v3
      with:
        path: Packages/package.to.test
    - run: |
        sed -i 's/%UNITY_VERSION%/${{ inputs.unityVersion }}/g' ProjectSettings/ProjectVersion.txt
        echo -e "\033[32mConfigured host project version:\033[0m"
        cat ProjectSettings/ProjectVersion.txt
        echo -e "\033[32m---\033[0m"
        sed -i 's/%TEST_PACKAGE_VERSION%/${{ inputs.testPackageVersion }}/g' Packages/manifest.json
        sed -i 's/%COVERAGE_PACKAGE_VERSION%/${{ inputs.coveragePackageVersion }}/g' Packages/manifest.json
        echo -e "\033[32mConfigured test and code coverage package versions:\033[0m"
        cat Packages/manifest.json
        echo -e "\033[32m---\033[0m"
        SCOPED_REGISTRIES=$(cat << 'EOF'
        ${{ inputs.scopedRegistries }}EOF
        )
        if ! [ -z "${SCOPED_REGISTRIES}" ]; then
          sed -i "s#\"scopedRegistries\": \[#\"scopedRegistries\": [\n    ${SCOPED_REGISTRIES//$'\n'/\\n    }\n  #g" Packages/manifest.json
          echo -e "\033[32mConfigured scoped registries:\033[0m"
          cat Packages/manifest.json
          echo -e "\033[32m---\033[0m"
        fi
        TEST_ONLY_PACKAGES=$(cat << 'EOF'
        ${{ inputs.testOnlyPackages }}EOF
        )
        if ! [ -z "${TEST_ONLY_PACKAGES}" ]; then
          sed -i "s#\"dependencies\": {#\"dependencies\": {\n    ${TEST_ONLY_PACKAGES//$'\n'/\\n    },#g" Packages/manifest.json
          echo -e "\033[32mConfigured test only packages:\033[0m"
          cat Packages/manifest.json
          echo -e "\033[32m---\033[0m"
        fi
      shell: bash
    - uses: game-ci/unity-test-runner@v3.1.0
      id: test-job
      with:
        unityVersion: ${{ inputs.unityVersion }}
        customImage: ${{ inputs.customImage }}
        customParameters: ${{ inputs.customParameters }}
        testMode: ${{ inputs.testMode }}
        coverageOptions: ${{ inputs.coverageOptions }}
        artifactsPath: ${{ inputs.artifactsPath }}
        useHostNetwork: ${{ inputs.useHostNetwork }}
        sshAgent: ${{ inputs.sshAgent }}
        gitPrivateToken: ${{ inputs.gitPrivateToken }}
        githubToken: ${{ inputs.githubToken }}
        checkName: ${{ inputs.checkName }}
        chownFilesTo: ${{ inputs.chownFilesTo }}
        unityLicensingServer: ${{ inputs.unityLicensingServer }}